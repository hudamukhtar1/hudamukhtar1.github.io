{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef } from \"react\"; // Hook\n\nconst useHover = () => {\n  _s();\n\n  const [value, setValue] = useState(false); // Wrap in useCallback so we can use in dependencies below\n\n  const handleMouseOver = useCallback(() => setValue(true), []);\n  const handleMouseOut = useCallback(() => setValue(false), []); // Keep track of the last node passed to callbackRef\n  // so we can remove its event listeners.\n\n  const ref = useRef(); // Use a callback ref instead of useEffect so that event listeners\n  // get changed in the case that the returned ref gets added to\n  // a different element later. With useEffect, changes to ref.current\n  // wouldn't cause a rerender and thus the effect would run again.\n\n  const callbackRef = useCallback(node => {\n    if (ref.current) {\n      ref.current.removeEventListener(\"mouseover\", handleMouseOver);\n      ref.current.removeEventListener(\"mouseout\", handleMouseOut);\n    }\n\n    ref.current = node;\n\n    if (ref.current) {\n      ref.current.addEventListener(\"mouseover\", handleMouseOver);\n      ref.current.addEventListener(\"mouseout\", handleMouseOut);\n    }\n  }, [handleMouseOver, handleMouseOut]);\n  return [callbackRef, value];\n};\n\n_s(useHover, \"TW77L4mu7Ju4XRF9hDjnlv9n0mI=\");\n\nexport default useHover;","map":{"version":3,"sources":["/Users/hudamukhtar/Desktop/Huda/src/hooks/use-hover.js"],"names":["useState","useCallback","useRef","useHover","value","setValue","handleMouseOver","handleMouseOut","ref","callbackRef","node","current","removeEventListener","addEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,OAA9C,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC,CADmB,CAGnB;;AACA,QAAMM,eAAe,GAAGL,WAAW,CAAC,MAAMI,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAAnC;AACA,QAAME,cAAc,GAAGN,WAAW,CAAC,MAAMI,QAAQ,CAAC,KAAD,CAAf,EAAwB,EAAxB,CAAlC,CALmB,CAOnB;AACA;;AACA,QAAMG,GAAG,GAAGN,MAAM,EAAlB,CATmB,CAWnB;AACA;AACA;AACA;;AACA,QAAMO,WAAW,GAAGR,WAAW,CAC1BS,IAAD,IAAU;AACN,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACbH,MAAAA,GAAG,CAACG,OAAJ,CAAYC,mBAAZ,CAAgC,WAAhC,EAA6CN,eAA7C;AACAE,MAAAA,GAAG,CAACG,OAAJ,CAAYC,mBAAZ,CAAgC,UAAhC,EAA4CL,cAA5C;AACH;;AAEDC,IAAAA,GAAG,CAACG,OAAJ,GAAcD,IAAd;;AAEA,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACbH,MAAAA,GAAG,CAACG,OAAJ,CAAYE,gBAAZ,CAA6B,WAA7B,EAA0CP,eAA1C;AACAE,MAAAA,GAAG,CAACG,OAAJ,CAAYE,gBAAZ,CAA6B,UAA7B,EAAyCN,cAAzC;AACH;AACJ,GAb0B,EAc3B,CAACD,eAAD,EAAkBC,cAAlB,CAd2B,CAA/B;AAiBA,SAAO,CAACE,WAAD,EAAcL,KAAd,CAAP;AACH,CAjCD;;GAAMD,Q;;AAmCN,eAAeA,QAAf","sourcesContent":["import { useState, useCallback, useRef } from \"react\";\n\n// Hook\nconst useHover = () => {\n    const [value, setValue] = useState(false);\n\n    // Wrap in useCallback so we can use in dependencies below\n    const handleMouseOver = useCallback(() => setValue(true), []);\n    const handleMouseOut = useCallback(() => setValue(false), []);\n\n    // Keep track of the last node passed to callbackRef\n    // so we can remove its event listeners.\n    const ref = useRef();\n\n    // Use a callback ref instead of useEffect so that event listeners\n    // get changed in the case that the returned ref gets added to\n    // a different element later. With useEffect, changes to ref.current\n    // wouldn't cause a rerender and thus the effect would run again.\n    const callbackRef = useCallback(\n        (node) => {\n            if (ref.current) {\n                ref.current.removeEventListener(\"mouseover\", handleMouseOver);\n                ref.current.removeEventListener(\"mouseout\", handleMouseOut);\n            }\n\n            ref.current = node;\n\n            if (ref.current) {\n                ref.current.addEventListener(\"mouseover\", handleMouseOver);\n                ref.current.addEventListener(\"mouseout\", handleMouseOut);\n            }\n        },\n        [handleMouseOver, handleMouseOut]\n    );\n\n    return [callbackRef, value];\n};\n\nexport default useHover;\n"]},"metadata":{},"sourceType":"module"}