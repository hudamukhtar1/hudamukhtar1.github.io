{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport imagesloaded from \"imagesloaded\";\nimport Isotope from \"isotope-layout\";\nimport { useEffect, useState } from \"react\";\nimport { flatDeep } from \"../utils\";\n\nconst useMasonry = (PortfolioData, masonryListWrap, masonryGrid, btnWrap, btn) => {\n  _s();\n\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    const mixCategories = PortfolioData.map(item => {\n      return item.categories.map(cat => cat);\n    });\n    const allCat = flatDeep(mixCategories, Infinity);\n    const commonCategories = [...new Set(allCat)];\n    setCategories(commonCategories); // This for Images\n\n    const masonryList = document.querySelector(masonryListWrap);\n    imagesloaded(masonryList, () => {\n      const projectItems = masonryList.querySelectorAll(masonryGrid);\n      let start = 1;\n\n      while (start < projectItems.length) {\n        projectItems[start].classList.add(\"grid-width-2\");\n        start += 4;\n      }\n\n      let Iso = new Isotope(masonryList, {\n        itemSelector: masonryGrid\n      });\n      const filterWrap = document.querySelector(btnWrap);\n      const filterItems = document.querySelectorAll(btn);\n      filterItems.forEach(filterItem => {\n        filterItem.addEventListener(\"click\", e => {\n          const filterCate = filterItem.dataset.filter;\n          filterWrap.querySelector(\".active\").classList.remove(\"active\");\n          e.target.classList.add(\"active\");\n          Iso.arrange({\n            filter: filterCate\n          });\n        });\n      });\n    });\n  }, [btn, btnWrap, masonryGrid, masonryListWrap, PortfolioData]);\n  return {\n    categories\n  };\n};\n\n_s(useMasonry, \"+ijgB8ROEl0Dkz53OTIi8GynN6s=\");\n\nexport default useMasonry;","map":{"version":3,"sources":["/Users/hudamukhtar/Documents/GitHub/hudamukhtar1.github.io/src/hooks/use-masonry.js"],"names":["imagesloaded","Isotope","useEffect","useState","flatDeep","useMasonry","PortfolioData","masonryListWrap","masonryGrid","btnWrap","btn","categories","setCategories","mixCategories","map","item","cat","allCat","Infinity","commonCategories","Set","masonryList","document","querySelector","projectItems","querySelectorAll","start","length","classList","add","Iso","itemSelector","filterWrap","filterItems","forEach","filterItem","addEventListener","e","filterCate","dataset","filter","remove","target","arrange"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,UAAzB;;AAEA,MAAMC,UAAU,GAAG,CACfC,aADe,EAEfC,eAFe,EAGfC,WAHe,EAIfC,OAJe,EAKfC,GALe,KAMd;AAAA;;AACD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,aAAa,GAAGP,aAAa,CAACQ,GAAd,CAAmBC,IAAD,IAAU;AAC9C,aAAOA,IAAI,CAACJ,UAAL,CAAgBG,GAAhB,CAAqBE,GAAD,IAASA,GAA7B,CAAP;AACH,KAFqB,CAAtB;AAGA,UAAMC,MAAM,GAAGb,QAAQ,CAACS,aAAD,EAAgBK,QAAhB,CAAvB;AACA,UAAMC,gBAAgB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,MAAR,CAAJ,CAAzB;AAEAL,IAAAA,aAAa,CAACO,gBAAD,CAAb,CAPY,CASZ;;AACA,UAAME,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuBhB,eAAvB,CAApB;AACAP,IAAAA,YAAY,CAACqB,WAAD,EAAc,MAAM;AAC5B,YAAMG,YAAY,GAAGH,WAAW,CAACI,gBAAZ,CAA6BjB,WAA7B,CAArB;AACA,UAAIkB,KAAK,GAAG,CAAZ;;AACA,aAAOA,KAAK,GAAGF,YAAY,CAACG,MAA5B,EAAoC;AAChCH,QAAAA,YAAY,CAACE,KAAD,CAAZ,CAAoBE,SAApB,CAA8BC,GAA9B,CAAkC,cAAlC;AACAH,QAAAA,KAAK,IAAI,CAAT;AACH;;AACD,UAAII,GAAG,GAAG,IAAI7B,OAAJ,CAAYoB,WAAZ,EAAyB;AAC/BU,QAAAA,YAAY,EAAEvB;AADiB,OAAzB,CAAV;AAIA,YAAMwB,UAAU,GAAGV,QAAQ,CAACC,aAAT,CAAuBd,OAAvB,CAAnB;AACA,YAAMwB,WAAW,GAAGX,QAAQ,CAACG,gBAAT,CAA0Bf,GAA1B,CAApB;AACAuB,MAAAA,WAAW,CAACC,OAAZ,CAAqBC,UAAD,IAAgB;AAChCA,QAAAA,UAAU,CAACC,gBAAX,CAA4B,OAA5B,EAAsCC,CAAD,IAAO;AACxC,gBAAMC,UAAU,GAAGH,UAAU,CAACI,OAAX,CAAmBC,MAAtC;AACAR,UAAAA,UAAU,CACLT,aADL,CACmB,SADnB,EAEKK,SAFL,CAEea,MAFf,CAEsB,QAFtB;AAGAJ,UAAAA,CAAC,CAACK,MAAF,CAASd,SAAT,CAAmBC,GAAnB,CAAuB,QAAvB;AACAC,UAAAA,GAAG,CAACa,OAAJ,CAAY;AACRH,YAAAA,MAAM,EAAEF;AADA,WAAZ;AAGH,SATD;AAUH,OAXD;AAYH,KAzBW,CAAZ;AA0BH,GArCQ,EAqCN,CAAC5B,GAAD,EAAMD,OAAN,EAAeD,WAAf,EAA4BD,eAA5B,EAA6CD,aAA7C,CArCM,CAAT;AAsCA,SAAO;AAAEK,IAAAA;AAAF,GAAP;AACH,CA/CD;;GAAMN,U;;AAiDN,eAAeA,UAAf","sourcesContent":["import imagesloaded from \"imagesloaded\";\nimport Isotope from \"isotope-layout\";\nimport { useEffect, useState } from \"react\";\nimport { flatDeep } from \"../utils\";\n\nconst useMasonry = (\n    PortfolioData,\n    masonryListWrap,\n    masonryGrid,\n    btnWrap,\n    btn\n) => {\n    const [categories, setCategories] = useState([]);\n    useEffect(() => {\n        const mixCategories = PortfolioData.map((item) => {\n            return item.categories.map((cat) => cat);\n        });\n        const allCat = flatDeep(mixCategories, Infinity);\n        const commonCategories = [...new Set(allCat)];\n\n        setCategories(commonCategories);\n\n        // This for Images\n        const masonryList = document.querySelector(masonryListWrap);\n        imagesloaded(masonryList, () => {\n            const projectItems = masonryList.querySelectorAll(masonryGrid);\n            let start = 1;\n            while (start < projectItems.length) {\n                projectItems[start].classList.add(\"grid-width-2\");\n                start += 4;\n            }\n            let Iso = new Isotope(masonryList, {\n                itemSelector: masonryGrid,\n            });\n\n            const filterWrap = document.querySelector(btnWrap);\n            const filterItems = document.querySelectorAll(btn);\n            filterItems.forEach((filterItem) => {\n                filterItem.addEventListener(\"click\", (e) => {\n                    const filterCate = filterItem.dataset.filter;\n                    filterWrap\n                        .querySelector(\".active\")\n                        .classList.remove(\"active\");\n                    e.target.classList.add(\"active\");\n                    Iso.arrange({\n                        filter: filterCate,\n                    });\n                });\n            });\n        });\n    }, [btn, btnWrap, masonryGrid, masonryListWrap, PortfolioData]);\n    return { categories };\n};\n\nexport default useMasonry;\n"]},"metadata":{},"sourceType":"module"}